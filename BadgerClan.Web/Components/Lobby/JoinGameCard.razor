@using Humanizer
@inject HttpClient httpClient
@inject Lobby lobby
@inject ILogger<JoinGameCard> logger
@inject NavigationManager navManager
@inject CurrentUserService CurrentUserService

<div class="col-lg-3 col-md-6 col-sm-12">
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@Game.Name</h5>
            <div style="background-color: azure; padding: 5px;">
                <div class="row">
                    <div class="col-auto">
                        <label for="botName" class="form-label fs-6 mb-0">Bot Name</label>
                    </div>
                    <div class="col-sm-12">
                        <input type="text" id="botName" class="form-control me-2" @bind="newBotName" />
                    </div>
                </div>
                <div class="row">
                    <span>Bot Engine</span>
                </div>
                <div class="row">
                    <div class="form-check ms-4">
                        <input class="form-check-input" type="radio" name=@($"botEngine{thisInstanceId}") value="custom" id="custom" checked
                            @onchange=botEngineChange />
                        <label for="custom" class="form-check-label">Custom</label>
                        <input type="text" class="form-control" @bind="joinUrl" placeholder="https://yourserver:1234"
                            style="width: 90%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="form-check ms-4">
                        <input class="form-check-input" type="radio" name=@($"botEngine{thisInstanceId}") value="runAndGun" id="runAndGun"
                            @onchange=botEngineChange />
                        <label for="runAndGun" class="form-check-label">Run &amp; Gun</label>
                    </div>
                </div>
                <div class="row">
                    <div class="form-check ms-4">
                        <input class="form-check-input" type="radio" name=@($"botEngine{thisInstanceId}") value="turtle" id="turtle"
                            @onchange=botEngineChange />
                        <label for="turtle" class="form-check-label">Turtle</label>
                    </div>
                </div>
                <div class="row">
                    <div class="form-check ms-4">
                        <input class="form-check-input" type="radio" name=@($"botEngine{thisInstanceId}") value="nothing" id="nothing"
                            @onchange=botEngineChange />
                        <label for="nothing" class="form-check-label">Do-Nothing</label>
                    </div>
                </div>
                <div class="row">
                    <button class="btn btn-primary mt-3 ms-3" style="width: 90%;" @onclick=joinGame>Join Game</button>
                </div>
            </div>
            <div class="d-flex justify-content-between">
                <p class="card-text">Players: @Game.TeamCount.ToString("n0")</p>
                <p class="card-text">Created: @Game.Created.Humanize()</p>
            </div>
            <div class="row">
                <div class="col-auto">
                    <h4>Current Players</h4>
                    @if (Game.TeamNames.Any())
                    {
                        <ul>
                            @foreach (var team in Game.TeamNames)
                            {
                                <li>@team</li>
                            }
                        </ul>
                    }
                </div>
                <div class="col">
                </div>
            </div>
            @if (Game.TeamList.Count > 1 && lobby.UserCreatedGame(CurrentUserService.CurrentUserId, Game))
            {
                <div class="row">
                    <button class="btn btn-warning" @onclick=startGame>Start Game</button>
                </div>
            }
            <button class="btn btn-secondary" @onclick=@(()=> navManager.NavigateTo($"/game/{Game.Id}"))>View
                        Game</button>
            <div class="text-bg-warning">
                @error
            </div>
        </div>
    </div>
</div>

@code {
    private static int nextInstanceId = 1;
    private int thisInstanceId = 1;
    public string SelectedBotEngine { get; set; } = "custom";
    [Parameter]
    public required GameState Game { get; set; }

    string newBotName = PlayerHelpers.GetRandomPlayerName();

    string joinUrl = string.Empty;
    string? error = null;

    private void addRunAndGun()
    {
        var networkBot = new NetworkBot(new Uri($"{navManager.BaseUri}bots/runandgun"));
        var newColor = PlayerHelpers.GetRandomColor();
        var team = new Team(newBotName, newColor, networkBot);
        Game.AddTeam(team);
        newBotName = PlayerHelpers.GetRandomPlayerName();
    }

    private void turtle()
    {
        var networkBot = new NetworkBot(new Uri($"{navManager.BaseUri}bots/turtle"));
        var newColor = PlayerHelpers.GetRandomColor();
        var team = new Team(newBotName, newColor, networkBot);
        Game.AddTeam(team);
        newBotName = PlayerHelpers.GetRandomPlayerName();
    }

    private void nothing()
    {
        var networkBot = new NetworkBot(new Uri($"{navManager.BaseUri}bots/nothing"));
        var newColor = PlayerHelpers.GetRandomColor();
        var team = new Team(newBotName, newColor, networkBot);
        Game.AddTeam(team);
        newBotName = PlayerHelpers.GetRandomPlayerName();
    }

    private void joinGame()
    {
        try
        {
            error = null;
            switch (SelectedBotEngine)
            {
                case "custom":
                    if (string.IsNullOrWhiteSpace(joinUrl))
                    {
                        error = "You must provide a URL for the custom bot engine";
                        return;
                    }
                    var networkBot = new NetworkBot(new Uri(joinUrl));
                    var newColor = PlayerHelpers.GetRandomColor();
                    var team = new Team(newBotName, newColor, networkBot);
                    Game.AddTeam(team);
                    newBotName = PlayerHelpers.GetRandomPlayerName();

                    break;
                case "runAndGun":
                    addRunAndGun();
                    break;
                case "turtle":
                    turtle();
                    break;
                case "nothing":
                    nothing();
                    break;
                default:
                    return;
            }
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
    }

    private void startGame()
    {
        lobby.StartGame(CurrentUserService.CurrentUserId, Game);
        navManager.NavigateTo($"/game/{Game.Id}");
    }

    protected override void OnInitialized()
    {
        thisInstanceId = nextInstanceId++;
        lobby.LobbyChanged += (e) => InvokeAsync(StateHasChanged);
        Game.GameChanged += (e) => InvokeAsync(StateHasChanged);
    }
    private void botEngineChange(ChangeEventArgs e)
    {
        SelectedBotEngine = e?.Value?.ToString() ?? string.Empty;
    }
}
