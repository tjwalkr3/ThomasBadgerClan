@page "/testgame"
@using BadgerClan.Web.Components.GameComponents
@rendermode InteractiveServer

<PageTitle>@state.Name</PageTitle>

@if (state.IsGameOver)
{
	<h2 class="text-success">@state.GetWinner().Name wins!</h2>
}
else
{
	<p>Turn: @state.TurnNumber <button @onclick="RunTurns">Run</button></p>
}

	<BoardComponent State=state />
<div>@status</div>

@code {

	private GameEngine engine = new GameEngine();
	private GameState state = new GameState();
	private string status = "";
	private int TickInterval = 30;


	private CancellationTokenSource source = new CancellationTokenSource();
	private CancellationToken ShouldStop => source.Token;
	private bool Running = false;

	private List<string> squadUnits = new List<string> {
		"Knight", "Knight", "Archer", "Archer", "Knight", "Knight",
	};
	private List<string> archerUnits = new List<string> {
		"Archer", "Archer", "Archer", "Archer", "Archer", "Archer",
	};

	//Remove this eventually, use state.TeamList instead
	private Dictionary<int, Team> teams = new Dictionary<int, Team>();

	protected override Task OnInitializedAsync()
	{
		var newColor = PlayerHelpers.GetRandomColor();

		MakeTeam(new DevBot(), "red");
		MakeTeam(new RunAndGun(), "blue");
		MakeTeam(new Turtle(3));
		MakeTeam(new Turtle(1));
		MakeTeam(new Turtle(2));
		MakeTeam(new RunAndGun());

		state.LayoutStartingPositions(squadUnits);

		// AddBorderUnits(state, state.TeamList.First().Id);
		
		// AddCircleUnits(state, 1, Coordinate.Offset(35, 35), 1);
		// AddCircleUnits(state, 2, Coordinate.Offset(35, 35), 2);
		// AddCircleUnits(state, 3, Coordinate.Offset(35, 35), 3);
		// AddCircleUnits(state, 4, Coordinate.Offset(35, 35), 4);

		return Task.CompletedTask;
	}

	private void MakeTeam(IBot bot, string color = "")
	{
		if (string.IsNullOrEmpty(color))
			color = PlayerHelpers.GetRandomColor();

		var team = new Team($"Team {color}", color, bot);
		state.AddTeam(team);
		teams.Add(team.Id, team);
	}

	private void RunTurns()
	{
		if (Running)
		{
			source.Cancel();
			Running = false;
			return;
		}
		Running = true;
		source = new CancellationTokenSource();

		Task.Run(() => ProcessTurn(), source.Token);
	}

	private async Task ProcessTurn()
	{
		while (Running)
		{
			ShouldStop.ThrowIfCancellationRequested();

			var bot = teams[state.CurrentTeamId].Bot;
			var moves = (await bot.PlanMovesAsync(state)) ?? [];

			GameEngine.ProcessTurn(state, moves);

			Running = state.Running;

			await InvokeAsync(StateHasChanged);

			Thread.Sleep(TickInterval);
		}
	}

	private static void AddCircleUnits(GameState stat, int teamid, Coordinate center, int distance)
	{
		var circle = center.Neighbors(distance);
		foreach(var loc in circle){
			stat.AddUnits(teamid, loc, new List<string> { "Archer" });
		}
	}

	private static void AddBorderUnits(GameState stat, int teamid)
	{
		stat.AddUnits(teamid, Coordinate.Offset(0, 0), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(0, 1), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, 0), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, 1), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(0, stat.Dimension), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(0, stat.Dimension - 1), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, stat.Dimension), new List<string> { "Archer" });
		stat.AddUnits(teamid, Coordinate.Offset(stat.Dimension, stat.Dimension - 1), new List<string> { "Archer" });
	}
}
