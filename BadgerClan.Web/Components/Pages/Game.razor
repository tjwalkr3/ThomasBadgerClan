@page "/game/{GameId}"
@using BadgerClan.Web.Components.GameComponents
@inject Lobby lobby
@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUserService

<div class="row">
    <div class="col-auto">
        <h3>Game: @game.Name</h3>
        @if (game != null && game.TeamList.Count > 1 && game.TurnNumber == 0 &&
        lobby.UserCreatedGame(CurrentUserService.CurrentUserId, game))
        {
            <button class="btn btn-primary" @onclick=@(() => lobby.StartGame(CurrentUserService.CurrentUserId, game))>Start
                Game</button>
        }
        @if (game.IsGameOver)
        {
            <h2 class="text-success">@game.GetWinner().Name wins!</h2>
            @if (lobby.UserCreatedGame(CurrentUserService.CurrentUserId, game))
            {
                <button class="btn btn-outline-warning" @onclick=restartGame>Restart Game</button>
            }
        }
        else
        {
            <p>Turn: @game.TurnNumber</p>
            @if (isGameOwner)
            {
                <button class="btn btn-outline-warning" @onclick=stopGame>Stop Game</button>
            }
        }
    </div>
    <BoardComponent State=game />
</div>


@code {
    [Parameter]
    public required string GameId { get; set; }

    public required GameState game;

    bool isGameOwner => lobby.UserCreatedGame(CurrentUserService.CurrentUserId, game);

    protected override void OnParametersSet()
    {
        if (!lobby.Games.Any(g => g.Id == Guid.Parse(GameId)))
        {
            NavigationManager.NavigateTo("/");
        }

        game = lobby.Games.First(g => g.Id == Guid.Parse(GameId));

        game.GameChanged += (_) => InvokeAsync(StateHasChanged);
        game.GameEnded += (_) => InvokeAsync(StateHasChanged);
    }

    void stopGame() => lobby.StopGame(CurrentUserService.CurrentUserId, game);

    void restartGame()
    {
        game.RestartGame();
        lobby.StartGame(CurrentUserService.CurrentUserId, game);
    }
}
