@inject Lobby lobby
@rendermode InteractiveServer

<style>
    .battle-field {
        position: relative;
        width: @(relativeWidth ? "100%" : DisplayConstants.MapHeight * boardScalar + "px");
        min-width: @(relativeWidth ? "100%" : DisplayConstants.MapHeight * boardScalar + "px");
        aspect-ratio: 997 / 860;
        background-image: linear-gradient(135deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }
</style>


<div class="col-auto bg-body-secondary p-3 border rounded-3 ms-3 mt-2 mb-3">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="relativeWidth" @bind=relativeWidth @oninput=@(() => boardScalar = 1.0) />
        <label class="form-check-label" for="relativeWidth">Relative Board Width</label>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="showHexagons" @bind=showHexagons />
        <label class="form-check-label" for="showHexagons">Show Hexagons</label>
    </div>

    @if(!relativeWidth)
    {
        <div>
            <label for="boardScalar">
                Board Scalar @boardScalar
                <br>
                <input type="range" id="boardScalar" name="boardScalar" min="0.5" max="10" step="0.25" @bind:event="oninput" @bind=boardScalar />
            </label>
        </div>
    }
</div>

<div class="row justify-content-around">
    <div class="col-xl-3">
        <div class="bg-body-secondary p-3 border rounded-3 mt-3 mb-3">
            <h3 class="text-center">Leaderboard</h3>
            <hr>

            <LeaderBoard State="State" ChartKills="false" />
            <hr>
            <LeaderBoard State="State" ChartKills="true" />
        </div>
    </div>
    <div class=@((relativeWidth ? "col-xl-9" : "col-auto" )+ " d-flex")>
        <div id="square" class="battle-field" style="">
            @if(showHexagons)
            {
                @foreach (var row in Enumerable.Range(0, State.Dimension + 1))
                {
                    @foreach (var column in Enumerable.Range(0, State.Dimension + 1))
                    {
                        <HexagonSquare Row=row Col=column Dimension=State.Dimension />
                    }

                }
            }
            @foreach (var u in State.Units.ToList())
            {
                if (u is null) continue;
                <UnitComponent 
                    Unit=u 
                    Team=teams?[u.Team] 
                    Dimension=State.Dimension 
                    @key=u.Id 
                    TickInterval=Lobby.TickInterval 
                    UnitScalar=boardScalar />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required GameState State { get; set; }

    private bool showHexagons = false;
    private bool relativeWidth = false;

    private double boardScalar = 1;

    private Dictionary<int, Team>? teams;

    protected override void OnParametersSet()
    {
        teams = State.TeamList.ToDictionary(t => t.Id);
        State.GameChanged += (e) => InvokeAsync(StateHasChanged);
    }
}